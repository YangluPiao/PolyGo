type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACKET
  | RBRACKET
  | LLBRACKET
  | RRBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSONE
  | MINUSONE
  | MODULUS
  | VB
  | ASSIGN
  | SQRT
  | ORDER
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | PASS
  | BREAK
  | INT
  | FLOAT
  | BOOL
  | COMPLEX
  | POLY
  | STRING
  | VOID
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRINGLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 59 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* LLBRACKET *);
  266 (* RRBRACKET *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* PLUSONE *);
  272 (* MINUSONE *);
  273 (* MODULUS *);
  274 (* VB *);
  275 (* ASSIGN *);
  276 (* SQRT *);
  277 (* ORDER *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* TRUE *);
  285 (* FALSE *);
  286 (* AND *);
  287 (* OR *);
  288 (* NOT *);
  289 (* RETURN *);
  290 (* IF *);
  291 (* ELSE *);
  292 (* FOR *);
  293 (* WHILE *);
  294 (* PASS *);
  295 (* BREAK *);
  296 (* INT *);
  297 (* FLOAT *);
  298 (* BOOL *);
  299 (* COMPLEX *);
  300 (* POLY *);
  301 (* STRING *);
  302 (* VOID *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  303 (* INTLIT *);
  304 (* FLOATLIT *);
  305 (* ID *);
  306 (* STRINGLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\009\000\009\000\010\000\010\000\
\006\000\006\000\007\000\007\000\003\000\003\000\003\000\003\000\
\003\000\003\000\008\000\008\000\013\000\013\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\012\000\012\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\004\000\001\000\003\000\
\000\000\001\000\000\000\002\000\003\000\005\000\006\000\010\000\
\010\000\008\000\002\000\001\000\001\000\002\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\002\000\001\000\
\001\000\004\000\004\000\001\000\001\000\001\000\001\000\005\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\004\000\004\000\003\000\
\001\000\003\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\077\000\000\000\006\000\007\000\009\000\008\000\
\012\000\010\000\011\000\001\000\003\000\004\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\046\000\000\000\040\000\
\044\000\000\000\045\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\073\000\000\000\066\000\068\000\
\069\000\000\000\000\000\000\000\000\000\067\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\019\000\016\000\051\000\049\000\000\000\050\000\
\065\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\055\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\074\000\070\000\043\000\000\000\071\000\042\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\029\000\048\000\
\000\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
\000\000\027\000\039\000\000\000\005\000\031\000\030\000\025\000\
\024\000\034\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\036\000\000\000\
\000\000\037\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\023\000\024\000\113\000\132\000\
\025\000\026\000\051\000\052\000\134\000\135\000\053\000"

let yysindex = "\016\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\255\238\254\
\003\255\027\255\000\000\160\000\046\000\249\254\018\255\066\255\
\000\000\067\255\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\088\255\094\255\060\255\000\000\000\000\046\000\000\000\
\000\000\006\255\000\000\053\001\070\255\110\255\000\000\115\255\
\160\000\212\001\120\002\121\255\000\000\072\255\000\000\000\000\
\000\000\099\002\046\000\046\000\117\255\000\000\046\000\046\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\016\255\081\255\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\237\001\006\002\073\255\028\255\078\002\068\255\068\255\
\000\000\000\000\000\000\120\002\161\002\161\002\159\255\159\255\
\159\255\159\255\013\000\141\002\046\000\046\000\131\255\000\000\
\113\255\000\000\000\000\000\000\139\255\000\000\000\000\130\255\
\098\255\000\000\162\255\012\255\141\255\165\255\166\255\174\255\
\178\255\000\000\019\255\184\255\080\001\240\255\000\000\000\000\
\180\255\191\255\192\255\080\001\000\000\107\001\046\000\046\000\
\046\000\000\000\000\000\075\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\002\203\255\056\002\240\255\046\000\
\240\255\158\255\134\001\000\000\240\255\046\000\000\000\199\255\
\240\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\204\255\000\000\000\000\000\000\000\000\
\000\000\211\255\000\000\179\255\108\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\096\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\104\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\092\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\127\000\158\000\
\000\000\000\000\000\000\080\000\165\001\171\001\189\000\220\000\
\251\000\026\001\069\255\202\001\179\255\108\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\179\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\210\255\000\000\000\000\
\000\000\000\000\000\000\182\255\000\000\000\000\000\000\217\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\201\255\000\000\000\000\000\000\220\255\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\107\000\000\000\254\255\000\000\000\000\101\000\
\177\000\000\000\235\255\230\255\000\000\188\255\176\255"

let yytablesize = 956
let yytable = "\044\000\
\012\000\015\000\054\000\019\000\020\000\050\000\114\000\063\000\
\055\000\056\000\057\000\058\000\141\000\027\000\064\000\028\000\
\001\000\062\000\029\000\109\000\016\000\021\000\110\000\030\000\
\046\000\016\000\031\000\032\000\018\000\033\000\118\000\034\000\
\035\000\087\000\022\000\036\000\093\000\090\000\091\000\037\000\
\038\000\045\000\094\000\039\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\040\000\041\000\042\000\043\000\017\000\157\000\
\111\000\151\000\047\000\148\000\048\000\062\000\080\000\062\000\
\049\000\062\000\062\000\019\000\062\000\087\000\062\000\088\000\
\068\000\069\000\120\000\121\000\070\000\168\000\062\000\062\000\
\081\000\059\000\162\000\133\000\164\000\021\000\075\000\060\000\
\167\000\075\000\062\000\062\000\170\000\140\000\142\000\087\000\
\076\000\138\000\076\000\061\000\076\000\076\000\131\000\076\000\
\133\000\075\000\027\000\075\000\123\000\082\000\083\000\029\000\
\117\000\156\000\092\000\158\000\030\000\086\000\087\000\031\000\
\032\000\112\000\033\000\122\000\034\000\035\000\137\000\087\000\
\036\000\133\000\163\000\133\000\037\000\038\000\143\000\133\000\
\039\000\124\000\125\000\133\000\126\000\127\000\128\000\129\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\040\000\
\041\000\042\000\043\000\027\000\136\000\123\000\144\000\145\000\
\029\000\066\000\067\000\068\000\069\000\030\000\146\000\070\000\
\031\000\032\000\147\000\033\000\152\000\034\000\035\000\075\000\
\075\000\036\000\076\000\076\000\149\000\037\000\038\000\153\000\
\165\000\039\000\124\000\125\000\154\000\126\000\127\000\128\000\
\129\000\169\000\035\000\160\000\035\000\035\000\017\000\035\000\
\040\000\041\000\042\000\043\000\035\000\018\000\028\000\035\000\
\035\000\075\000\035\000\130\000\035\000\035\000\075\000\139\000\
\035\000\084\000\000\000\000\000\035\000\035\000\000\000\000\000\
\035\000\035\000\035\000\000\000\035\000\035\000\000\000\035\000\
\000\000\027\000\000\000\123\000\000\000\000\000\029\000\035\000\
\035\000\035\000\035\000\030\000\000\000\000\000\031\000\032\000\
\000\000\033\000\000\000\034\000\035\000\000\000\000\000\036\000\
\000\000\000\000\000\000\037\000\038\000\000\000\000\000\039\000\
\124\000\125\000\000\000\126\000\127\000\000\000\129\000\066\000\
\067\000\068\000\069\000\000\000\000\000\070\000\040\000\041\000\
\042\000\043\000\072\000\073\000\074\000\075\000\076\000\077\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\027\000\
\000\000\028\000\000\000\075\000\029\000\075\000\075\000\000\000\
\075\000\030\000\000\000\000\000\031\000\032\000\000\000\033\000\
\000\000\034\000\035\000\000\000\000\000\036\000\000\000\000\000\
\000\000\037\000\038\000\000\000\000\000\039\000\000\000\000\000\
\072\000\000\000\072\000\000\000\072\000\072\000\000\000\072\000\
\000\000\072\000\000\000\000\000\040\000\041\000\042\000\043\000\
\041\000\072\000\041\000\000\000\041\000\041\000\000\000\041\000\
\000\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
\041\000\041\000\041\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\000\000\041\000\041\000\052\000\
\000\000\052\000\000\000\052\000\052\000\000\000\052\000\000\000\
\052\000\052\000\052\000\000\000\000\000\000\000\000\000\000\000\
\052\000\052\000\000\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\052\000\052\000\053\000\000\000\
\053\000\000\000\053\000\053\000\000\000\053\000\000\000\053\000\
\053\000\053\000\000\000\000\000\000\000\000\000\000\000\053\000\
\053\000\000\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\053\000\053\000\058\000\000\000\058\000\
\000\000\058\000\058\000\000\000\058\000\000\000\058\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\058\000\058\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\058\000\058\000\059\000\000\000\059\000\000\000\
\059\000\059\000\000\000\059\000\000\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\059\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\060\000\000\000\060\000\000\000\060\000\
\060\000\000\000\060\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\000\060\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\000\000\
\060\000\060\000\061\000\000\000\061\000\000\000\061\000\061\000\
\000\000\061\000\000\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\061\000\000\000\000\000\061\000\
\061\000\061\000\061\000\061\000\061\000\065\000\000\000\061\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\000\000\000\000\070\000\000\000\071\000\
\000\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\150\000\000\000\078\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\000\000\000\000\
\070\000\000\000\071\000\000\000\000\000\072\000\073\000\074\000\
\075\000\076\000\077\000\155\000\000\000\078\000\079\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\000\000\000\000\070\000\000\000\071\000\000\000\000\000\
\072\000\073\000\074\000\075\000\076\000\077\000\166\000\000\000\
\078\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\000\000\000\000\070\000\000\000\
\071\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\000\000\078\000\079\000\056\000\000\000\056\000\
\000\000\056\000\056\000\057\000\056\000\057\000\056\000\057\000\
\057\000\000\000\057\000\000\000\057\000\000\000\056\000\056\000\
\000\000\000\000\056\000\056\000\057\000\057\000\000\000\000\000\
\057\000\057\000\056\000\056\000\000\000\000\000\000\000\000\000\
\057\000\057\000\063\000\000\000\063\000\000\000\063\000\063\000\
\000\000\063\000\000\000\063\000\000\000\000\000\085\000\000\000\
\000\000\000\000\000\000\063\000\063\000\000\000\066\000\067\000\
\068\000\069\000\000\000\000\000\070\000\000\000\071\000\000\000\
\063\000\072\000\073\000\074\000\075\000\076\000\077\000\115\000\
\000\000\078\000\079\000\000\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\000\000\000\000\070\000\000\000\071\000\
\000\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\116\000\000\000\078\000\079\000\000\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\000\000\000\000\070\000\000\000\
\071\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\159\000\000\000\078\000\079\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\000\000\000\000\070\000\
\000\000\071\000\000\000\000\000\072\000\073\000\074\000\075\000\
\076\000\077\000\161\000\000\000\078\000\079\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\000\000\000\000\
\070\000\000\000\071\000\000\000\000\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\078\000\079\000\119\000\
\066\000\067\000\068\000\069\000\000\000\000\000\070\000\000\000\
\071\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\000\000\078\000\079\000\066\000\067\000\068\000\
\069\000\000\000\000\000\070\000\089\000\071\000\000\000\000\000\
\072\000\073\000\074\000\075\000\076\000\077\000\000\000\000\000\
\078\000\079\000\066\000\067\000\068\000\069\000\000\000\000\000\
\070\000\000\000\071\000\000\000\000\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\078\000\079\000\066\000\
\067\000\068\000\069\000\000\000\000\000\070\000\000\000\000\000\
\000\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\000\000\000\000\078\000\066\000\067\000\068\000\069\000\000\000\
\000\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\075\000\076\000\077\000"

let yycheck = "\021\000\
\000\000\004\000\029\000\001\001\002\001\027\000\087\000\002\001\
\030\000\031\000\032\000\033\000\001\001\002\001\009\001\004\001\
\001\000\039\000\007\001\004\001\007\001\019\001\007\001\012\001\
\007\001\007\001\015\001\016\001\047\001\018\001\003\001\020\001\
\021\001\006\001\008\001\024\001\063\000\059\000\060\000\028\001\
\029\001\049\001\064\000\032\001\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\047\001\048\001\049\001\050\001\049\001\144\000\
\049\001\134\000\049\001\049\001\003\001\001\001\001\001\003\001\
\006\001\005\001\006\001\001\001\008\001\006\001\010\001\008\001\
\013\001\014\001\109\000\110\000\017\001\166\000\018\001\019\001\
\019\001\002\001\159\000\113\000\161\000\019\001\003\001\002\001\
\165\000\006\001\030\001\031\001\169\000\123\000\124\000\006\001\
\001\001\008\001\003\001\048\001\005\001\006\001\113\000\008\001\
\134\000\006\001\002\001\008\001\004\001\008\001\004\001\007\001\
\048\001\143\000\006\001\145\000\012\001\005\001\006\001\015\001\
\016\001\049\001\018\001\001\001\020\001\021\001\005\001\006\001\
\024\001\159\000\160\000\161\000\028\001\029\001\002\001\165\000\
\032\001\033\001\034\001\169\000\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\002\001\026\001\004\001\002\001\002\001\
\007\001\011\001\012\001\013\001\014\001\012\001\001\001\017\001\
\015\001\016\001\001\001\018\001\001\001\020\001\021\001\005\001\
\006\001\024\001\005\001\006\001\005\001\028\001\029\001\001\001\
\035\001\032\001\033\001\034\001\005\001\036\001\037\001\038\001\
\039\001\003\001\002\001\001\001\004\001\005\001\003\001\007\001\
\047\001\048\001\049\001\050\001\012\001\003\001\005\001\015\001\
\016\001\001\001\018\001\113\000\020\001\021\001\003\001\123\000\
\024\001\049\000\255\255\255\255\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\255\255\036\001\037\001\255\255\039\001\
\255\255\002\001\255\255\004\001\255\255\255\255\007\001\047\001\
\048\001\049\001\050\001\012\001\255\255\255\255\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\032\001\
\033\001\034\001\255\255\036\001\037\001\255\255\039\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\047\001\048\001\
\049\001\050\001\022\001\023\001\024\001\025\001\026\001\027\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\002\001\
\255\255\004\001\255\255\003\001\007\001\005\001\006\001\255\255\
\008\001\012\001\255\255\255\255\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\255\255\255\255\
\001\001\255\255\003\001\255\255\005\001\006\001\255\255\008\001\
\255\255\010\001\255\255\255\255\047\001\048\001\049\001\050\001\
\001\001\018\001\003\001\255\255\005\001\006\001\255\255\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\031\001\001\001\
\255\255\003\001\255\255\005\001\006\001\255\255\008\001\255\255\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\030\001\031\001\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\008\001\255\255\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\001\001\255\255\003\001\
\255\255\005\001\006\001\255\255\008\001\255\255\010\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\030\001\031\001\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\030\001\031\001\001\001\255\255\003\001\255\255\005\001\
\006\001\255\255\008\001\255\255\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\030\001\031\001\001\001\255\255\003\001\255\255\005\001\006\001\
\255\255\008\001\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\001\001\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\255\255\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\001\001\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\001\001\255\255\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\001\001\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\255\255\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\001\001\255\255\003\001\
\255\255\005\001\006\001\001\001\008\001\003\001\010\001\005\001\
\006\001\255\255\008\001\255\255\010\001\255\255\018\001\019\001\
\255\255\255\255\022\001\023\001\018\001\019\001\255\255\255\255\
\022\001\023\001\030\001\031\001\255\255\255\255\255\255\255\255\
\030\001\031\001\001\001\255\255\003\001\255\255\005\001\006\001\
\255\255\008\001\255\255\010\001\255\255\255\255\003\001\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\255\255\019\001\255\255\
\031\001\022\001\023\001\024\001\025\001\026\001\027\001\003\001\
\255\255\030\001\031\001\255\255\255\255\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\255\255\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\003\001\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\255\255\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\003\001\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\255\255\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\003\001\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\031\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\255\255\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\030\001\031\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\031\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\030\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\026\001\027\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  LLBRACKET\000\
  RRBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSONE\000\
  MINUSONE\000\
  MODULUS\000\
  VB\000\
  ASSIGN\000\
  SQRT\000\
  ORDER\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  PASS\000\
  BREAK\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  COMPLEX\000\
  POLY\000\
  STRING\000\
  VOID\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRINGLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 38 "parser.mly"
           ( _1 )
# 530 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                 ( [], [] )
# 536 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 42 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 544 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 552 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formal_list_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_opt) in
    Obj.repr(
# 47 "parser.mly"
     ({ ftyp = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8  })
# 567 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
       ( Int )
# 573 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
         ( Float )
# 579 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
           ( Complex )
# 585 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
        ( Bool )
# 591 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
          ( String )
# 597 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
        ( Void )
# 603 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
        ( Poly )
# 609 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                       ( Prim_f_decl( _1, _2 ) )
# 617 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                                ( Arr_f_decl( _1, _4) )
# 625 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 67 "parser.mly"
                         ( [ _1 ] )
# 632 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 68 "parser.mly"
                            ( _3 :: _1 )
# 640 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                  ( [] )
# 646 "parser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 72 "parser.mly"
                 (  _1 )
# 653 "parser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
               ( [] )
# 659 "parser.ml"
               : 'vdecl_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 76 "parser.mly"
                           (_2 :: _1)
# 667 "parser.ml"
               : 'vdecl_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 79 "parser.mly"
                                                 ( Primdecl(_1, _2) )
# 675 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                             ( Primdecl_i(_1, _2, _4) )
# 684 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 81 "parser.mly"
                                                                  ( Arr_poly_decl(_1, _5, _3) )
# 693 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list_opt) in
    Obj.repr(
# 82 "parser.mly"
                                                                               ( Arrdecl_i(_1, _5, _3, List.rev _8) )
# 703 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list_opt) in
    Obj.repr(
# 83 "parser.mly"
                                                                           ( Polydecl_i( _1, _5, _3, List.rev _8) )
# 713 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 84 "parser.mly"
                                                  (Arr_poly_decl_i(_1,_5,_3,_7))
# 723 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                 ([])
# 729 "parser.ml"
               : 'stmt_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 88 "parser.mly"
               ( _1 )
# 736 "parser.ml"
               : 'stmt_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
          ( [_1] )
# 743 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                   ( _2 :: _1 )
# 751 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
           ( Expr _1 )
# 758 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
               ( Return Noexpr )
# 764 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                    ( Return _2 )
# 771 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_opt) in
    Obj.repr(
# 98 "parser.mly"
                               ( Block(List.rev _2) )
# 778 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
                                           ( If( _3, _5, Block([]) ) )
# 786 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 100 "parser.mly"
                                        ( If( _3,  _5, _7 ) )
# 795 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 101 "parser.mly"
                                                           ( For(_3, _5, _7, _9 ) )
# 805 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 102 "parser.mly"
                                 ( While(_3, _5) )
# 813 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                          ( Break )
# 819 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 107 "parser.mly"
                 ( Intlit( _1 ) )
# 826 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
               ( Id(_1) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                                 ( Extr( _1, _3 ) )
# 841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                            (Order(_3))
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 111 "parser.mly"
                    ( Floatlit( _1 ) )
# 855 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
                 ( Strlit( _1 ) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                    ( Boollit( false ) )
# 868 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                    ( Boollit( true ) )
# 874 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : float) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : float) in
    Obj.repr(
# 115 "parser.mly"
                                    ( Complexlit( _2, _4 ) )
# 882 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 116 "parser.mly"
                                  ( Polylit(_2 ) )
# 889 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 118 "parser.mly"
                                     ( Arrlit(_2 ))
# 896 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                      ( _2 )
# 903 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                    ( Binop(_1, Add,   _3) )
# 911 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                    ( Binop(_1, Sub,   _3) )
# 919 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                    ( Binop(_1, Mult,  _3) )
# 927 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                    ( Binop(_1, Div,   _3) )
# 935 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                    ( Binop(_1, Equal, _3) )
# 943 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                    ( Binop(_1, Neq,   _3) )
# 951 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                    ( Binop(_1, Less,  _3) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                    ( Binop(_1, Leq,   _3) )
# 967 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 975 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                    ( Binop(_1, Geq,   _3) )
# 983 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                    ( Binop(_1, And,   _3) )
# 991 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                    ( Binop(_1, Or,    _3) )
# 999 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Modu,    _3) )
# 1007 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                ( Mod(_2) )
# 1014 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                        ( Unop(Neg, _2) )
# 1021 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                    ( Unop(Not, _2) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                ( Unop( Addone, _2 ) )
# 1035 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                 ( Unop( Subone, _2 ) )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                           (Unop(Sqrt,_3))
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 142 "parser.mly"
                                  ( Call( _1, _3 ) )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                    ( Asn( _1, _3 ) )
# 1065 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_opt) in
    Obj.repr(
# 159 "parser.mly"
            ( [_1] )
# 1072 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_opt) in
    Obj.repr(
# 160 "parser.mly"
                                ( _3 :: _1 )
# 1080 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
     ( Noexpr )
# 1086 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
        ( _1 )
# 1093 "parser.ml"
               : 'expr_opt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
